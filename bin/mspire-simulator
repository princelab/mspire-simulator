#!/usr/bin/env ruby
#SQLite version = 3.7.13
#sudo aptitude install sqlite3
#sudo aptitude install libsqlite3-dev
#gem install sqlite3
$LOAD_PATH << './lib'

require 'time'
require 'sqlite3'
require 'progress'
require 'nokogiri'
require 'mspire/digester'
require 'mspire/tagged_peak'
require 'mspire'
require 'ms/sim_peptide'
require 'ms/rt/rtgenerator'
require 'ms/sim_spectra'
require 'ms/noise'
require 'ms/mzml_wrapper'
require 'trollop'
require 'ms/tr_file_writer'
require 'ms/isoelectric_calc'
require 'ms/sim_digester'
require 'ms/sim_trollop'
require 'ms/merger'



module MspireSimulator
@opts = MS::Troll.new.get
  begin

  @start = Time.now

    one_d = @opts[:one_d]
    noise = @opts[:noise]
    truth = @opts[:truth]
    out_file = @opts[:out_file]
    email = @opts[:email]
    
    if one_d == "true"
      one_d = true
      run_time = 300.0
    else
      one_d = false
    end
    
    module_function
    def opts; @opts end


    SampleLoad = 1.0 # Instrument dependent scaling, for an Orbitrap, assumed to be 1 ug 
    # TODO define an option for sample loading, and a scaling function to define the peak intensities
    database = nil
    if @opts[:memory] == "true"
      database = ":memory:"
    else
      if @opts[:databaseName] == "peptides_[Time.now.sec]"
        database = "peptides_#{Time.now.sec}.sqlite3" #can be :memory: stored
      else
        database = "#{@opts[:databaseName]}.sqlite3"
      end
    end
    #
    db = SQLite3::Database.new(database)
    db.transaction
    db.execute "CREATE TABLE IF NOT EXISTS peptides(Id INTEGER PRIMARY KEY, seq TEXT, mass REAL, charge INTEGER, mono_mz REAL, p_rt REAL, p_rt_index REAL, p_int REAL, abu REAL, sx REAL, rt_a INTEGER, rt_b INTEGER, prot_id INTEGER)"
    db.execute "CREATE TABLE IF NOT EXISTS aac(Id INTEGER PRIMARY KEY, A INTEGER,R INTEGER,N INTEGER,D INTEGER,B INTEGER,C INTEGER,E INTEGER,Q INTEGER,Z INTEGER,G INTEGER,H INTEGER,I INTEGER,L INTEGER,K INTEGER,M INTEGER,F INTEGER,P INTEGER,S INTEGER,T INTEGER,W INTEGER,Y INTEGER,V INTEGER,J INTEGER, place_holder REAL)"
    db.execute "CREATE TABLE IF NOT EXISTS core_spec(pep_id INTEGER PRIMARY KEY,mzs TEXT, ints TEXT)"
    #
    
    #------------------------Digest-----------------------------------------------
    peptides = []
    digester = MS::Sim_Digester.new(@opts[:digestor],@opts[:pH],@opts[:missed_cleavages],db)
    ARGV.each do |file|
      digester.digest(file)
    end
    #-----------------------------------------------------------------------------



    #------------------------Create Spectrum--------------------------------------
    spectra = MS::Sim_Spectra.new(@opts, one_d,db)
    
    if noise == 'true'
      noise = spectra.noiseify(db)
    end
    #-----------------------------------------------------------------------------
    
    
    
    #------------------------Merge Overlaps---------------------------------------
    Merger.merge(@opts[:overlapRange].to_f,db)
    #-----------------------------------------------------------------------------
    
    
    
    #-----------------------MZML--------------------------------------------------
    mzml = Mzml_Wrapper.new(db,@opts)
    puts "Writing to mzml file..."
    mzml.to_xml(out_file)
    puts "Done."
    #-----------------------------------------------------------------------------



    #------------------------Truth Files------------------------------------------
    if truth != "false"
      if truth == "xml"
        MS::Txml_file_writer.write(db,out_file,@opts)
      elsif truth == "csv"
        MS::Tcsv_file_writer.write(db,out_file,@opts)
      elsif truth == "xml_csv" or truth == "csv_xml"
        MS::Txml_file_writer.write(db,out_file,@opts)
        MS::Tcsv_file_writer.write(db,out_file,@opts)
      end
    end
    #-----------------------------------------------------------------------------

  rescue Exception => e  #Clean up if exception 
    puts e.message  
    puts e.backtrace 
    if digester != nil
      if File.exists?(digester.digested_file)
        File.delete(digester.digested_file)
      end
    end
    system "rm #{database}"
    puts "Exception - Simulation Failed"
  ensure
    system "sim_mail #{email} Simulation Complete" if email != "nil"
    db.commit
    db.close if db
  end
end
